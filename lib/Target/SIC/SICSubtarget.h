//===-- SICSubtarget.h - Define Subtarget for the SIC ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the SIC specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SIC_SICSUBTARGET_H
#define LLVM_LIB_TARGET_SIC_SICSUBTARGET_H

#include "SICFrameLowering.h"
#include "SICISelLowering.h"
#include "SICInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "SICGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class SICTargetMachine;

class SICSubtarget : public SICGenSubtargetInfo {
  virtual void anchor();

protected:
  enum SICArchEnum {
    SICSE,
    SICXE
  };

  // SIC architecture version
  SICArchEnum SICArchVersion;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  InstrItineraryData InstrItins;

  const SICTargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const SICInstrInfo> InstrInfo;
  std::unique_ptr<const SICFrameLowering> FrameLowering;
  std::unique_ptr<const SICTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  const SICABIInfo &getABI() const;

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  SICSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                bool little, const SICTargetMachine &_TM);

//- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasSICSE() const { return SICArchVersion >= SICSE; }
  bool isSICSE() const { return SICArchVersion == SICSE; }
  bool hasSICXE() const { return SICArchVersion >= SICXE; }
  bool isSICXE() const { return SICArchVersion == SICXE; }

  /// Features related to the presence of specific instructions.

  bool abiUsesSoftFloat() const;

  unsigned stackAlignment() const { return 8; }

  SICSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const SICInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const SICRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }
  const SICTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // End llvm namespace

#endif
